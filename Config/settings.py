"""
Django settings for Config project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
import django
from django.utils.translation import gettext_lazy as _


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool)


AUTH_USER_MODEL = "Person.User"

ALLOWED_HOSTS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",  # required for allauth
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",  # required for allauth
    "django.contrib.staticfiles",
    "django.contrib.sites",  # required for allauth
    ## Libraries
    "graphene_django",
    "django_filters",
    "django_spaghetti",
    "polymorphic_tree",
    "polymorphic",
    "mptt",
    "import_export",
    "bootstrap5",
    "countries_plus",
    "languages_plus",
    "django_prices",
    "currencies",
    "crispy_forms",
    # allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # ... include the providers you want to enable:
    "allauth.socialaccount.providers.amazon",
    "allauth.socialaccount.providers.amazon_cognito",
    "allauth.socialaccount.providers.apple",
    "allauth.socialaccount.providers.auth0",
    "allauth.socialaccount.providers.authentiq",
    "allauth.socialaccount.providers.azure",
    "allauth.socialaccount.providers.bitbucket",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.linkedin",
    "allauth.socialaccount.providers.microsoft",
    "allauth.socialaccount.providers.paypal",
    "allauth.socialaccount.providers.spotify",
    "allauth.socialaccount.providers.telegram",
    "allauth.socialaccount.providers.trello",
    "allauth.socialaccount.providers.twitter",
    "allauth.socialaccount.providers.yahoo",
    "allauth.socialaccount.providers.zoom",
    ## My Apps
    "GraphQL",
    "Unit",
    "Language",
    "Libraries",
    "Utils",
    "Payment",  # ماليات
    "Location",
    "Facility",  # منشآت
    "Person",
    # 'Persons.apps.UsersConfig',
    "Product",
    "Nady_System",
    "Article",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # For Translation
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "countries_plus.middleware.AddRequestCountryMiddleware", # countries_plus
]

ROOT_URLCONF = "Config.urls"

## NOTE All Auth Setting:

SITE_ID = 1

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        "APP": {
            "client_id": "643557013339-dh57soae8v352ma31hg0jh9q61bq6mv1.apps.googleusercontent.com",
            "secret": "p7nT4ELhWDVyT6a_4Fy2Yppg",
            "key": "AIzaSyAMKZolIIE9Na-CyWIP6tYDj5CBaN5EvyU",
        }
    }
}


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",  # `allauth` needs this from django
                ## django-currencies
                'django.core.context_processors.request',  # must be enabled
                "currencies.context_processors.currencies",  #  required for Django-Currencies
                #
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.i18n",  # For Translation
                "django.contrib.messages.context_processors.messages",
                'countries_plus.context_processors.add_request_country', # django-countries-plus
            ],
        },
    },
]

WSGI_APPLICATION = "Config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "djongo",
        "NAME": "djongo",
        # # 'ENFORCE_SCHEMA': False,
        # 'CLIENT': {
        #     'host': 'mongodb+srv://shadyelnady:ShN_0502910850@cluster0.bxjud.mongodb.net/myFirstDatabase?retryWrites=true&w=majority',
        #     # 'port': port_number,
        #     # 'username': 'db-username',
        #     # 'password': 'password',
        #     # 'authSource': 'db-name',
        #     'name': 'nady_lab',
        #     'authMechanism': 'SCRAM-SHA-1'
        # },
        # 'LOGGING': {
        #     'version': 1,
        #     'loggers': {
        #         'djongo': {
        #             'level': 'DEBUG',
        #             'propagate': False,
        #         }
        #     },
        #     },
    }
}
# DATABASES = {
#     "default": dj_database_url.parse(config("DATABASE_URL"), conn_max_age=3600)
# }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

if DEBUG:
    STATICFILES_DIRS = [
        BASE_DIR / "static",
    ]
else:
    STATIC_ROOT = BASE_DIR / "static"


MEDIA_URL = "media/"

MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SPAGHETTI_SAUCE = {
    "apps": [
        "auth",
        "GraphQL",
        "Unit",
        "Libraries",
        "Utils",
        "Language",
        "Location",
        "Payment",  # ماليات
        "Facility",  # منشآت
        "Person",
        "Product",
        "Nady_System",
        "Article",
    ],
    "show_fields": True,
    "exclude": {"auth": ["user"]},
    "show_proxy": True,
}

# It determines if the library will use database transactions on data import
IMPORT_EXPORT_USE_TRANSACTIONS = True


# Graphene settings
GRAPHENE = {
    "SCHEMA": "GraphQL.schema.schema",
    "MIDDLEWARE": (
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
        "graphene_django.debug.DjangoDebugMiddleware",
    ),
    "SCHEMA_OUTPUT": "schema.graphql",
    "SCHEMA_INDENT": 2,
}

AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_EXPIRATION_DELTA": timedelta(days=1),
}


LOGIN_URL = "/accounts/login/"

LOGIN_REDIRECT_URL = "/accounts/profile/"

LOGOUT_REDIRECT_URL = "/"


EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/


TIME_ZONE = "UTC"

USE_TZ = True

## TODO Languages Setting

USE_I18N = True

# If you set this to True, Django will format dates, numbers and calendars
# according to user current locale.
USE_L10N = True

LANGUAGE_CODE = "en-us"

LANGUAGES = [
    ("ar", _("Arabic")),
    ("en", _("English")),
    ("fr", _("french")),
]


# True for right-to-left languages like Arabic, and to False otherwise
# LANGUAGE_BIDI = False
# Languages using BiDi (right-to-left) layout
LANGUAGES_BIDI = [
    "ar",
    # "he", "ar-dz", "fa", "ur"
]

# LOCALE_PATHS = (BASE_DIR / "locale/",)
LOCALE_PATHS = [
    BASE_DIR / "Locales/",
    '/home/www/project/common_files/locale',
    '/var/local/translations/locale',
]
###


# Crispy forms
CRISPY_ALLOWED_TEMPLATE_PACKS = (
    "bootstrap",
    "uni_form",
    "bootstrap3",
    "bootstrap4",
    "crispy-bootstrap5",
)
CRISPY_TEMPLATE_PACK = "crispy-bootstrap5"
CRISPY_CLASS_CONVERTERS = {
    "textinput": "form-control textinput",
    "passwordinput": "form-control passwordinput",
    "radioinput": "form-control",
}
###

GDAL_LIBRARY_PATH = (
    r"E:\Django\Nady Lab System\Django\venv\Lib\site-packages\osgeo\gdal304.dll"
)


GEOS_LIBRARY_PATH = (
    r"E:\Django\Nady Lab System\Django\venv\Lib\site-packages\osgeo\geos_c.dll"
)


# django-currencies
OPENEXCHANGERATES_APP_ID = config("OPENEXCHANGERATES_APP_ID")
SHOP_CURRENCIES = ()
if django.VERSION < (1, 7):
    INSTALLED_APPS += (
        'south',
    )
###

# django-countries-plus
COUNTRIES_PLUS_COUNTRY_HEADER = "HTTP_CF_EG"
COUNTRIES_PLUS_DEFAULT_ISO = "EG"
###